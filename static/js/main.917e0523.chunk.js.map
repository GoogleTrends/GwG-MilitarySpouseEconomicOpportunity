{"version":3,"sources":["DataLoader.js","config.js","Menu.js","MapIcon.js","AutoplayQuestionTooltip.js","Map.js","CityViewQuestions.js","App.js","serviceWorker.js","index.js"],"names":["files","config","color","selectedColor","defaultMapColor","title","subtitle","instructions","Menu","props","coloredFontStyle","topics","map","topic","topicIndex","selected","selectedTopicIndex","nextSelectedTopicIndex","style","Object","objectSpread","borderColor","react_default","a","createElement","key","Topic","onClick","selectTopic","className","src","concat","process","alt","MapIcon","viewBox","scale","targetHeight","renderprops","to","cursor","transform","fill","d","cx","cy","r","defaultProps","AutoplayQuestionTooltip","city","this","cities","selectedCityIndex","_this$props$projectio","projection","Long","Lat","_this$props$projectio2","slicedToArray","x","y","yOffset","cornerSize","window","innerWidth","left","top","City","Typist_default","startDelay","onTypingDone","question","Question","React","Component","stateFills","feature","us","objects","features","stateOutlines","mesh","b","geoAlbersUsa","defaultScale","pathGen","geoPath","Map","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_resize","setState","mapWidth","_svg","getBoundingClientRect","_mapContainer","state","_debouncedResize","debounce","bind","assertThisInitialized","addEventListener","removeEventListener","_this2","mulitplier","mapHeight","targetMapWidth","translate","selectedName","selectedPosition","slice","sort","aSelected","index","nextSelectedCityIndex","bSelected","icons","_projection","_projection2","selectCity","selectedStateName","split","trim","autoplayQuestionTooltip","mode","modes","Autoplay","console","log","AutoplayQuestionTooltip_AutoplayQuestionTooltip","assign","cityViewQuestionTooltip","CityView","ref","c","width","height","i","properties","name","stroke","defaultOffscreen","CityViewQuestions","prevProps","selectedCity","selectedTopic","questionsData","questions","filter","Subject","forEach","q","dismissingCityQuestions","questionsOffscreen","closeButtonOpacity","pointerEvents","opacity","disableCityMode","from","keys","items","onRest","questionsRested","_ref","backgroundColor","App","_initAutoplay","_autoplayTimeout","setTimeout","_pickAutoplayQuestion","cityIndex","tries","_loop","randomCityIndex","Math","floor","random","length","warn","_autoplayTypingDone","_selectTopic","_onRestCallbacks","push","clearTimeout","_selectCity","quesiton","_questionsRested","cb","_disableCityMode","loaded","Promise","resolve","reject","queue","defer","csv","await","error","then","prevState","Menu_Menu","Map_Map","CityViewQuestions_CityViewQuestions","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0WAGMA,EAAQ,CAAC,aAAc,aAAc,6BCH5BC,EAAA,CACbC,MAAO,UACPC,cAAe,UACfC,gBAAiB,UACjBC,MAAO,uCACPC,SAAU,oCACVC,aAAc,iDCFD,SAASC,EAAKC,GAC3B,IAAMC,EAAmB,CAAER,MAAOD,EAAOC,OACnCS,EAASF,EAAME,OAAOC,IAAI,SAACC,EAAOC,GACtC,IAAMC,EAAYD,IAAeL,EAAMO,oBAAsD,MAAhCP,EAAMQ,wBAAmCH,IAAeL,EAAMQ,uBACrHC,EAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAQT,EAAR,CAA0BW,YAAaN,EAAWd,EAAOE,cAAgB,OACpF,OAAOmB,EAAAC,EAAAC,cAAA,MAAIC,IAAKZ,EAAMa,MAAOR,MAAOA,EAAOS,QAASlB,EAAMmB,YAAYd,IAAcD,EAAMa,SAE5F,OACEJ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eACbP,EAAAC,EAAAC,cAAA,OAAKM,IAAG,GAAAC,OAAKC,IAAL,8BAAyDC,IAAI,qBACrEX,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QAAQX,MAAOR,GAAmBT,EAAOI,OACxDiB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YAAY5B,EAAOK,UAClCgB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eAAeX,MAAOR,GAAmBT,EAAOM,eAGjEe,EAAAC,EAAAC,cAAA,UACGb,uECnBI,SAASuB,EAAQzB,GAG9B,IAAM0B,EAAU,CAAC,MAAO,OAClBC,EAAQ3B,EAAM4B,aAAeF,EAAQ,GAC3C,OACEb,EAAAC,EAAAC,cAACc,EAAA,OAAD,CACEC,GAAI,CAAEH,UAEL,SAAAlB,GAAK,OACJI,EAAAC,EAAAC,cAAA,KAAGN,MAAO,CAACsB,OAAQ,WAAYC,UAAS,SAAAV,OAAWb,EAAMkB,MAAjB,gBAAAL,QAAsCI,EAAQ,GAAK,EAAnD,MAAAJ,QAA0DI,EAAQ,GAAlE,MACtCb,EAAAC,EAAAC,cAAA,QAAMkB,KAAMjC,EAAMiC,KAAMC,EAAE,uIAAuIF,UAAU,6BAC3KnB,EAAAC,EAAAC,cAAA,QAAMkB,KAAK,OAAOC,EAAE,0PAA0PF,UAAU,6BACxRnB,EAAAC,EAAAC,cAAA,UAAQkB,KAAK,OAAOE,GAAG,QAAQC,GAAG,QAAQC,EAAE,YAOtDZ,EAAQa,aAAe,CACrBL,KAAM,UACNL,aAAc,yBCpBKW,0LAIjB,IAAMC,EAAOC,KAAKzC,MAAM0C,OAAOD,KAAKzC,MAAM2C,mBADnCC,EAEiBH,KAAKzC,MAAM6C,WAAW,CAACL,EAAKM,KAAMN,EAAKO,MAFxDC,EAAAtC,OAAAuC,EAAA,EAAAvC,CAAAkC,EAAA,GAEAM,EAFAF,EAAA,GAIDG,EAJCH,EAAA,GAIgBP,KAAKzC,MAAMoD,QAK5BC,EAAiC,KAApBC,OAAOC,WAAqB,GACzC9C,EAAQ,CACZ+C,KAAMN,EAAIG,EAAYI,IAAKN,EAAIE,GAIjC,OACExC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,0BAA0BX,MAAOA,GAC9CI,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WAAWX,MAAO,CAAEhB,MAAOD,EAAOE,gBAAkB8C,EAAKkB,MACxE7C,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACbP,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,CAAQ8C,WAAY,IAAKC,aAAcpB,KAAKzC,MAAM6D,cAAepB,KAAKzC,MAAM8D,SAASC,mBAtB1CC,IAAMC,mBCarDC,EAAaC,YAAQC,EAAIA,EAAGC,QAAQ,cAAcC,SAClDC,EAAgBC,YAAKJ,EAAIA,EAAGC,QAAQ,aAAc,SAASvD,EAAG2D,GAAK,OAAO3D,IAAM2D,IAEhF5B,EAAa6B,cACbC,EAAe9B,EAAWlB,QAC1BiD,EAAUC,YAAQhC,GAEHiC,cACnB,SAAAA,EAAY9E,GAAO,IAAA+E,EAAArE,OAAAsE,EAAA,EAAAtE,CAAA+B,KAAAqC,IACjBC,EAAArE,OAAAuE,EAAA,EAAAvE,CAAA+B,KAAA/B,OAAAwE,EAAA,EAAAxE,CAAAoE,GAAAK,KAAA1C,KAAMzC,KAmBRoF,QAAU,WACRL,EAAKM,SAAS,CAAEC,SAA8B,GAApBhC,OAAOC,YAAoB,WACnD,IAAMH,EAAU2B,EAAKQ,KAAKC,wBAAwB/B,IAAMsB,EAAKU,cAAcD,wBAAwB/B,IACnGsB,EAAKM,SAAS,CACZjC,eArBJ,IAAMkC,EAA+B,GAApBhC,OAAOC,WAHP,OAIjBwB,EAAKW,MAAQ,CACXJ,YAGFP,EAAKY,iBAAmBC,IAASb,EAAKK,QAAS,KAAKS,KAA5BnF,OAAAoF,EAAA,EAAApF,CAAAqE,IARPA,mFAYjBzB,OAAOyC,iBAAiB,SAAUtD,KAAKkD,kBACvClD,KAAK2C,yDAIL9B,OAAO0C,oBAAoB,SAAUvD,KAAKkD,mDAYnC,IAAAM,EAAAxD,KACDyD,EAAazD,KAAKiD,MAAMJ,SA1CX,IA2Cb3D,EAAQuE,EAAavB,EACrBwB,EAAY1D,KAAKiD,MAAMJ,SA1CVc,KA4CnBvD,EAAWlB,MAAMA,GACd0E,UAAU,CA/CM,IA+CYH,EAAa,EA9CxB,IA8C6CA,EAAa,IAC9E,IAAII,EAAe,KACfC,EAAmB,KACjB7D,EAASD,KAAKzC,MAAM0C,OAAO8D,QACjC9D,EAAO+D,KAAK,SAAC3F,EAAG2D,GACd,IAAMiC,EAAa5F,EAAE6F,QAAUV,EAAKjG,MAAM2C,mBAAyD,MAApCsD,EAAKjG,MAAM4G,uBAAkC9F,EAAE6F,QAAUV,EAAKjG,MAAM4G,sBAC7HC,EAAapC,EAAEkC,QAAUV,EAAKjG,MAAM2C,mBAAyD,MAApCsD,EAAKjG,MAAM4G,uBAAkCnC,EAAEkC,QAAUV,EAAKjG,MAAM4G,sBACnI,OAAIF,GAAaG,EACR,EACEH,EACF,EACEG,GACD,EAED,IAGX,IAAMC,EAAQpE,EAAOvC,IAAI,SAACqC,GACxB,IAAMlC,EAAYkC,EAAKmE,QAAUV,EAAKjG,MAAM2C,mBAAyD,MAApCsD,EAAKjG,MAAM4G,uBAAkCpE,EAAKmE,QAAUV,EAAKjG,MAAM4G,sBADvGG,EAElBlE,EAAW,CAACL,EAAKM,KAAMN,EAAKO,MAFViE,EAAAtG,OAAAuC,EAAA,EAAAvC,CAAAqG,EAAA,GAE1B7D,EAF0B8D,EAAA,GAEvB7D,EAFuB6D,EAAA,GAOjC,OAJI1G,IACFgG,EAAe9D,EAAKkB,KACpB6C,EAAmB,CAACrD,EAAGC,IAGvBtC,EAAAC,EAAAC,cAAA,KAAGC,IAAKwB,EAAKkB,KAAM1B,UAAS,aAAAV,OAAe4B,EAAf,MAAA5B,OAAqB6B,EAArB,KAA2BjC,QAAS+E,EAAKjG,MAAMiH,WAAWzE,EAAKmE,QACzF9F,EAAAC,EAAAC,cAACU,EAAD,CAASQ,KAAMzC,EAAOE,cAAekC,aAActB,EAAW,GAAK4F,EAAa,GAAKA,OAKrFgB,EAAoBZ,EAAaa,MAAM,KAAK,GAAGC,OAEjDC,EAA0B,KAC1B5E,KAAKzC,MAAMsH,OAASC,EAAMC,UAAY/E,KAAKzC,MAAM8D,WACnD2D,QAAQC,IAAIjF,KAAKzC,MAAM8D,UACvBuD,EAA0BxG,EAAAC,EAAAC,cAAC4G,EAADjH,OAAAkH,OAAA,GAA6BnF,KAAKzC,MAAWyC,KAAKiD,MAAlD,CAAyD7C,WAAYA,MAEjG,IAAIgF,EAA0B,KAC9B,GAAIpF,KAAKzC,MAAMsH,OAASC,EAAMO,SAAU,CACtC,IAAMzE,EAAiC,KAApBC,OAAOC,WAAqB,GAEzCL,EAAIqD,EAAiB,GAAKlD,EAE1B5C,EAAQ,CAAE+C,KAAMN,EAAGO,IADf8C,EAAiB,GAAK9D,KAAKiD,MAAMtC,QAAUC,EACpB5D,MAAOD,EAAOE,eAC3CwD,EAAIT,KAAKiD,MAAMJ,SAAW,IAC5B7E,EAAMuB,UAAY,qBAEpB6F,EACEhH,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBAAkBX,MAAOA,GACrC6F,GAKP,OACEzF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,MAAM2G,IAAK,SAAAC,GAAC,OAAK/B,EAAKR,cAAgBuC,IACnDnH,EAAAC,EAAAC,cAAA,OAAKkH,MAAOxF,KAAKiD,MAAMJ,SAAU4C,OAAQ/B,EAAW4B,IAAK,SAAAC,GAAC,OAAK/B,EAAKV,KAAOyC,IACxE9D,EAAW/D,IAAI,SAACuF,EAAOyC,GACtB,IACMlG,EADgByD,EAAM0C,WAAWC,OAASnB,EACnB1H,EAAOC,MAAQD,EAAOG,gBACnD,OAAOkB,EAAAC,EAAAC,cAAA,QAAMC,IAAKmH,EAAGjG,EAAG0C,EAAQc,GAAQjF,MAAO,CAAEwB,YAEnDpB,EAAAC,EAAAC,cAAA,QAAMmB,EAAG0C,EAAQL,GAAgBtC,KAAK,OAAOqG,OAAO,YACnDxB,GAEFO,EACAQ,UAvGwB7D,IAAMC,WCnBjCsE,SAAmB,KACJC,cAEnB,SAAAA,EAAYxI,GAAO,IAAA+E,EAAA,OAAArE,OAAAsE,EAAA,EAAAtE,CAAA+B,KAAA+F,IACjBzD,EAAArE,OAAAuE,EAAA,EAAAvE,CAAA+B,KAAA/B,OAAAwE,EAAA,EAAAxE,CAAA8H,GAAArD,KAAA1C,KAAMzC,KAED0F,MAAQ,CACXxC,EAAGqF,GAJYxD,mFAQbtC,KAAKzC,MAAMsH,OAASC,EAAMO,UAC5BrF,KAAK4C,SAAS,CAAEnC,EAAG,+CAGJuF,GACbhG,KAAKzC,MAAMsH,OAASC,EAAMO,UAAYW,EAAUnB,OAASC,EAAMO,SACjErF,KAAK4C,SAAS,CAAEnC,EAAG,IACVuF,EAAUnB,OAASC,EAAMO,UAAYrF,KAAKzC,MAAMsH,OAASC,EAAMO,UACxErF,KAAK4C,SAAS,CAAEnC,EAAGqF,qCAIrB,IAAMG,EAAejG,KAAKzC,MAAM0C,OAAOD,KAAKzC,MAAM2C,mBAAmBe,KAC/DiF,EAAgBlG,KAAKzC,MAAME,OAAOuC,KAAKzC,MAAMO,oBAAoBU,MACjE2H,EAAgBnG,KAAKzC,MAAM6I,UAAUC,OAAO,SAAAhF,GAChD,OAAOA,EAASJ,OAASgF,GAAgB5E,EAASiF,UAAYJ,GAAuC,KAAtB7E,EAASC,WAE1F6E,EAAcI,QAAQ,SAACC,EAAGd,GAAJ,OAAUc,EAAEtC,MAAQwB,IAE1C,IAAMjF,EAAIT,KAAKzC,MAAMkJ,yBAA2BzG,KAAKzC,MAAMsH,OAASC,EAAMO,SAAWS,EAAmB9F,KAAKiD,MAAMxC,EAC7GiG,EAAqBjG,IAAMqF,EAC3Ba,EAAqBD,EAAqB,EAAI,EAC9CE,EAAgBF,EAAqB,OAAS,KAC9CpH,EAASoH,EAAqB,UAAY,KAChD,OACEtI,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QAAQX,MAAO,CAAE4I,gBAAe5J,MAAOD,EAAOC,MAAO6J,QAASF,IAC3EvI,EAAAC,EAAAC,cAAA,QAAMG,QAASuB,KAAKzC,MAAMuJ,gBAAiB9I,MAAO,CAAEsB,WAApD,SAEFlB,EAAAC,EAAAC,cAACc,EAAA,MAAD,CACE2H,KAAM,CAAEtG,EAAGqF,GACXzG,GAAI,CAAEoB,KACNuG,KAAM,SAAA3F,GAAQ,SAAAxC,OAAOoH,EAAP,KAAApH,OAAuBwC,EAAS6C,QAC9C+C,MAAOd,EACPe,OAAQlH,KAAKzC,MAAM4J,iBAClB,SAAA9F,GAAQ,OAAI,SAAA+F,GAAA,IAAG3G,EAAH2G,EAAG3G,EAAH,OAETrC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WAAWX,MAAO,CAAEqJ,gBAAiBtK,EAAOC,MAAOuC,UAAS,cAAAV,OAAgB4B,EAAhB,QACxEY,EAASC,qBAhDqBC,IAAMC,WCAxCsD,EAAQ,CACnBC,SAAU,WACVM,SAAU,YAoJGiC,cAhJb,SAAAA,EAAY/J,GAAO,IAAA+E,EAAA,OAAArE,OAAAsE,EAAA,EAAAtE,CAAA+B,KAAAsH,IACjBhF,EAAArE,OAAAuE,EAAA,EAAAvE,CAAA+B,KAAA/B,OAAAwE,EAAA,EAAAxE,CAAAqJ,GAAA5E,KAAA1C,KAAMzC,KAkCRgK,cAAgB,WACdjF,EAAKkF,iBAAmBC,WAAWnF,EAAKoF,sBAAuB,MApC9CpF,EAuCnBoF,sBAAwB,WAItB,IAHA,IAAIrG,EAAW,KACXsG,EAAY,KACZC,EAAQ,EAHgBC,EAAA,WAK1B,IAAMC,EAAkBC,KAAKC,MAAMD,KAAKE,SAAW3F,EAAKW,MAAMhD,OAAOiI,QACrE,GAAIJ,IAAoBxF,EAAKW,MAAM/C,kBACjC,iBAEF0H,IAEA,IAAM3B,EAAe3D,EAAKW,MAAMhD,OAAO6H,GAAiB7G,KAClDiF,EAAgB5D,EAAKW,MAAMxF,OAAO6E,EAAKW,MAAMnF,oBAAoBU,MACjE2H,EAAgB7D,EAAKW,MAAMmD,UAAUC,OAAO,SAAAhF,GAChD,OAAOA,EAASJ,OAASgF,GAAgB5E,EAASiF,UAAYJ,GAAuC,KAAtB7E,EAASC,WAEtF6E,EAAc+B,OAAS,IACzB7G,EAAW8E,EAAc4B,KAAKC,MAAMD,KAAKE,SAAW9B,EAAc+B,SAClEP,EAAYG,EACZ9C,QAAQC,IAAIgB,EAAc5E,EAASC,YAfrB,MAAZD,GAAoBuG,EAAQ,IAAIC,IAkBtB,MAAZxG,EACF2D,QAAQmD,KAAK,2CAEb7F,EAAKM,SAAS,CAAE1C,kBAAmByH,EAAWtG,cAhE/BiB,EAoEnB8F,oBAAsB,WACpB9F,EAAKkF,iBAAmBC,WAAW,WACjCnF,EAAKM,SAAS,CAAEvB,SAAU,MAAQ,WAChCiB,EAAKkF,iBAAmBC,WAAWnF,EAAKoF,sBAAuB,QAEhE,MAzEcpF,EA4EnB+F,aAAe,SAACvK,GACd,OAAO,WACDwE,EAAKW,MAAMnF,qBAAuBA,IAGlCwE,EAAKW,MAAM4B,OAASC,EAAMO,SAC5B/C,EAAKM,SAAS,CACZ6D,yBAAyB,EACzB1I,uBAAwBD,GACvB,WACDwE,EAAKgG,iBAAiBC,KAAK,WACzBjG,EAAKM,SAAS,CAAE6D,yBAAyB,EAAO3I,qBAAoBC,uBAAwB,YAIhGuE,EAAKM,SAAS,CAAE9E,qBAAoBuD,SAAU,OAC9CmH,aAAalG,EAAKkF,kBAClBlF,EAAKiF,oBA7FQjF,EAkGnBmG,YAAc,SAACvI,GACb,OAAO,WACL,GAAIoC,EAAKW,MAAM4B,OAASC,EAAMO,SAAU,CACtC,GAAI/C,EAAKW,MAAM/C,oBAAsBA,EACnC,OAEFoC,EAAKM,SAAS,CACZ6D,yBAAyB,EACzBtC,sBAAuBjE,GACtB,WACDoC,EAAKgG,iBAAiBC,KAAK,WACzBjG,EAAKM,SAAS,CAAE6D,yBAAyB,EAAOvG,oBAAmBiE,sBAAuB,gBAI9F7B,EAAKgG,iBAAiBJ,OAAS,EAC/BM,aAAalG,EAAKkF,kBAClBlF,EAAKM,SAAS,CAAE1C,oBAAmBiE,sBAAuB,KAAMU,KAAMC,EAAMO,SAAUqD,SAAU,SAnHnFpG,EAwHnBqG,iBAAmB,WACjBrG,EAAKgG,iBAAiB/B,QAAQ,SAAAqC,GAAE,OAAIA,MACpCtG,EAAKgG,iBAAiBJ,OAAS,GA1Hd5F,EA6HnBuG,iBAAmB,WACjBvG,EAAKgG,iBAAiBJ,OAAS,EAC/B5F,EAAKM,SAAS,CAAEiC,KAAMC,EAAMC,UAAYzC,EAAKoF,wBA5H7CpF,EAAKW,MAAQ,CACX6F,QAAQ,EACRhL,mBAAoB,EACpBoC,kBAAmB,EACnBiE,sBAAuB,KACvBpG,uBAAwB,KACxB8G,KAAM,KACN4B,yBAAyB,GAE3BnE,EAAKgG,iBAAmB,GAZPhG,mFAcC,IAAAkB,EAAAxD,KPtBb,IAAI+I,QAAQ,SAACC,EAASC,GAC3BC,cACGC,MAAMC,IADT,GAAAvK,OACiBC,IADjB,KAAAD,OAC2C/B,EAAM,KAC9CqM,MAAMC,IAFT,GAAAvK,OAEiBC,IAFjB,KAAAD,OAE2C/B,EAAM,KAC9CqM,MAAMC,IAHT,GAAAvK,OAGiBC,IAHjB,KAAAD,OAG2C/B,EAAM,KAC9CuM,MAAM,SAACC,EAAO7L,EAAQwC,EAAQmG,GACzBkD,GAAOL,EAAOK,GAClBrJ,EAAOsG,QAAQ,SAACxG,EAAM4H,GACpB5H,EAAKmE,MAAQyD,IAEfqB,EAAQ,CACNvL,SAAQwC,SAAQmG,kBOYTmD,KAAK,SAAAnC,GAAiC,IAA/BnH,EAA+BmH,EAA/BnH,OAAQxC,EAAuB2J,EAAvB3J,OAAQ2I,EAAegB,EAAfhB,UAClC5C,EAAKZ,SAAS,CACZkG,QAAQ,EACR7I,SACAxC,SACA2I,YACAvB,KAAMC,EAAMC,UACXvB,EAAK+D,4DAKOvB,EAAWwD,GACxBA,EAAU3E,OAASC,EAAMiB,mBAAqB/F,KAAKiD,MAAM4B,OAASC,EAAMC,SAC1E/E,KAAKuH,gBACIiC,EAAU3E,OAASC,EAAMC,UAAY/E,KAAKiD,MAAM4B,OAASC,EAAMiB,mBACxEyC,aAAaxI,KAAKwH,mDAoGpB,OAAKxH,KAAKiD,MAAM6F,OAId1K,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACmL,EAADxL,OAAAkH,OAAA,GAAUnF,KAAKiD,MAAf,CAAsBvE,YAAasB,KAAKqI,gBACxCjK,EAAAC,EAAAC,cAACoL,EAADzL,OAAAkH,OAAA,GAASnF,KAAKiD,MAAd,CAAqBuB,WAAYxE,KAAKyI,YAAarH,aAAcpB,KAAKoI,uBACtEhK,EAAAC,EAAAC,cAACqL,EAAD1L,OAAAkH,OAAA,GAAuBnF,KAAKiD,MAA5B,CAAmCkE,gBAAiBnH,KAAK2I,iBAAkB7B,gBAAiB9G,KAAK6I,qBAN5F,YArIKtH,IAAMC,WCAJoI,QACW,cAA7B/I,OAAOgJ,SAASC,UAEe,UAA7BjJ,OAAOgJ,SAASC,UAEhBjJ,OAAOgJ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7L,EAAAC,EAAAC,cAAC4L,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC","file":"static/js/main.917e0523.chunk.js","sourcesContent":["import { csv } from 'd3-request'\nimport { queue } from 'd3-queue'\n\nconst files = ['Topics.csv', 'Cities.csv', 'Questions.csv']\nexport default function load() {\n  return new Promise((resolve, reject) => {\n    queue()\n      .defer(csv, `${process.env.PUBLIC_URL}/${files[0]}`)\n      .defer(csv, `${process.env.PUBLIC_URL}/${files[1]}`)\n      .defer(csv, `${process.env.PUBLIC_URL}/${files[2]}`)\n      .await((error, topics, cities, questions) => {\n        if (error) reject(error);\n        cities.forEach((city, cityIndex) => {\n          city.index = cityIndex\n        })\n        resolve({\n          topics, cities, questions\n        })\n      })\n\n  })\n}\n","export default {\n  color: '#4285F4',\n  selectedColor: '#EA4335',\n  defaultMapColor: '#9AA0A6',\n  title: 'Military Spouse Economic Opportunity',\n  subtitle: 'through the lens of Google Search',\n  instructions: 'Choose a topic below or click on a city',\n}","import React from 'react';\nimport config from './config';\nimport './Menu.css';\n\nexport default function Menu(props) {\n  const coloredFontStyle = { color: config.color }\n  const topics = props.topics.map((topic, topicIndex) => {\n    const selected = (topicIndex === props.selectedTopicIndex && props.nextSelectedTopicIndex == null) || topicIndex === props.nextSelectedTopicIndex ;\n    const style = { ...coloredFontStyle, borderColor: selected ? config.selectedColor : null }\n    return <li key={topic.Topic} style={style} onClick={props.selectTopic(topicIndex)}>{topic.Topic}</li>\n  })\n  return (\n    <div className='menu'>\n      <div className='menuWrapper'>\n        <img src={`${process.env.PUBLIC_URL}/grow-with-google-logo.svg`} alt='Grow with Google' />\n        <div className='text'>\n          <div className='title' style={coloredFontStyle}>{config.title}</div>\n          <div className='subtitle'>{config.subtitle}</div>\n          <div className='instructions' style={coloredFontStyle}>{config.instructions}</div>\n        </div>\n\n        <ul>\n          {topics}\n        </ul>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport {Spring} from 'react-spring/renderprops'\n\nexport default function MapIcon(props) {\n\n  // const viewBox = [179,242]\n  const viewBox = [33.06, 43.34]\n  const scale = props.targetHeight / viewBox[1]\n  return (\n    <Spring\n      to={{ scale }}\n    >\n      {style =>\n        <g style={{cursor: 'pointer'}} transform={`scale(${style.scale}) translate(${-viewBox[0] / 2}, ${-viewBox[1]})`}>\n          <path fill={props.fill} d=\"M28,52.77a1,1,0,0,1-.66-.25C26.72,52,12.46,39.11,12.46,27a15.53,15.53,0,0,1,31.06,0c0,12.14-14.26,25-14.86,25.55A1,1,0,0,1,28,52.77Z\" transform=\"translate(-11.46 -10.44)\"/>\n          <path fill=\"#fff\" d=\"M28,12.44A14.52,14.52,0,0,1,42.52,27C42.52,38.8,28,51.77,28,51.77S13.46,38.8,13.46,27A14.53,14.53,0,0,1,28,12.44m0-2A16.55,16.55,0,0,0,11.46,27c0,12.58,14.58,25.74,15.2,26.3a2,2,0,0,0,2.66,0c.62-.56,15.2-13.72,15.2-26.3A16.54,16.54,0,0,0,28,10.44Z\" transform=\"translate(-11.46 -10.44)\"/>\n          <circle fill=\"#fff\" cx=\"16.53\" cy=\"16.44\" r=\"6.29\"/>\n        </g>\n      }\n    </Spring>\n  )\n}\n\nMapIcon.defaultProps = {\n  fill: '#000000',\n  targetHeight: 40,\n}","import React from 'react'\nimport Typist from 'react-typist'\nimport './AutoplayQuestionTooltip.css';\nimport config from './config'\n\nexport default class AutoplayQuestionTooltip extends React.Component {\n\n\n  render() {\n    const city = this.props.cities[this.props.selectedCityIndex]\n    const [x, yProjected] = this.props.projection([city.Long, city.Lat])\n\n    const y = yProjected + this.props.yOffset;\n\n    // let's not flip anything for now\n    // const translateX = '0'\n    // const translateY = y > window.innerHeight * 0.5 ? '-100%' : '0'\n    const cornerSize = window.innerWidth * 0.001 * 0.6;\n    const style = {\n      left: x - cornerSize, top: y - cornerSize,\n      // transform: `translate(${translateX}, ${translateY})`\n    }\n\n    return (\n      <div className='AutoplayQuestionTooltip' style={style}>\n        <div className='cityName' style={{ color: config.selectedColor }}>{city.City}</div>\n        <div className='question'>\n          <Typist startDelay={500} onTypingDone={this.props.onTypingDone}>{this.props.question.Question}</Typist>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { geoAlbersUsa, geoPath } from 'd3-geo'\nimport { feature, mesh } from 'topojson'\nimport debounce from 'lodash/debounce'\nimport {modes} from './App';\n\nimport './Map.css'\nimport MapIcon from './MapIcon'\nimport AutoplayQuestionTooltip from './AutoplayQuestionTooltip';\n\nimport config from './config'\n\nimport us from './us-states-topo.json'\n\nconst targetMapWidth = 960\nconst targetMapHeight = 500;\nconst mapAspectRatio = targetMapWidth / targetMapHeight;\n\nconst stateFills = feature(us, us.objects['us-states']).features\nconst stateOutlines = mesh(us, us.objects['us-states'], function(a, b) { return a !== b; })\n\nconst projection = geoAlbersUsa()\nconst defaultScale = projection.scale();\nconst pathGen = geoPath(projection);\n\nexport default class Map extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const mapWidth = window.innerWidth * 0.6;\n    this.state = {\n      mapWidth,\n    }\n\n    this._debouncedResize = debounce(this._resize, 100).bind(this)\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._debouncedResize)\n    this._resize()\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._debouncedResize)\n  }\n\n  _resize = () => {\n    this.setState({ mapWidth: window.innerWidth * 0.6 }, () => {\n      const yOffset = this._svg.getBoundingClientRect().top - this._mapContainer.getBoundingClientRect().top\n      this.setState({\n        yOffset,\n      })\n    })\n  }\n\n  render() {\n    const mulitplier = this.state.mapWidth / targetMapWidth;\n    const scale = mulitplier * defaultScale\n    const mapHeight = this.state.mapWidth / mapAspectRatio;\n\n    projection.scale(scale)\n      .translate([targetMapWidth * mulitplier / 2, targetMapHeight * mulitplier / 2])\n    let selectedName = null\n    let selectedPosition = null;\n    const cities = this.props.cities.slice()\n    cities.sort((a, b) => {\n      const aSelected = (a.index === this.props.selectedCityIndex && this.props.nextSelectedCityIndex == null) || a.index === this.props.nextSelectedCityIndex;\n      const bSelected = (b.index === this.props.selectedCityIndex && this.props.nextSelectedCityIndex == null) || b.index === this.props.nextSelectedCityIndex;\n      if (aSelected && bSelected) {\n        return 0\n      } else if (aSelected) {\n        return 1\n      } else if (bSelected) {\n        return -1\n      } else {\n        return 0\n      }\n    })\n    const icons = cities.map((city) => {\n      const selected = (city.index === this.props.selectedCityIndex && this.props.nextSelectedCityIndex == null) || city.index === this.props.nextSelectedCityIndex;\n      const [x, y] = projection([city.Long, city.Lat])\n      if (selected) {\n        selectedName = city.City\n        selectedPosition = [x, y]\n      }\n      return (\n        <g key={city.City} transform={`translate(${x}, ${y})`} onClick={this.props.selectCity(city.index)} >\n          <MapIcon fill={config.selectedColor} targetHeight={selected ? 50 * mulitplier : 30 * mulitplier} />\n        </g>\n      )\n    })\n\n    const selectedStateName = selectedName.split(',')[1].trim()\n\n    let autoplayQuestionTooltip = null\n    if (this.props.mode === modes.Autoplay && this.props.question) {\n      console.log(this.props.question)\n      autoplayQuestionTooltip = <AutoplayQuestionTooltip {...this.props} {...this.state} projection={projection} />\n    }\n    let cityViewQuestionTooltip = null\n    if (this.props.mode === modes.CityView) {\n      const cornerSize = window.innerWidth * 0.001 * 0.6;\n\n      const x = selectedPosition[0] - cornerSize\n      const y = selectedPosition[1] + this.state.yOffset - cornerSize\n      const style = { left: x, top: y, color: config.selectedColor };\n      if (x > this.state.mapWidth / 2) {\n        style.transform = 'translateX(-100%)'\n      }\n      cityViewQuestionTooltip = (\n        <div className='cityViewTooltip' style={style}>\n          {selectedName}\n        </div>\n      )\n    }\n\n    return (\n      <div className='map' ref={c => (this._mapContainer = c)}>\n        <svg width={this.state.mapWidth} height={mapHeight} ref={c => (this._svg = c)}>\n          {stateFills.map((state, i) => {\n            const stateSelected = state.properties.name === selectedStateName\n            const fill = stateSelected ? config.color : config.defaultMapColor\n            return <path key={i} d={pathGen(state)} style={{ fill }} />\n          })}\n          <path d={pathGen(stateOutlines)} fill='none' stroke='#f5f5f5'/>\n          {icons}\n        </svg>\n        {autoplayQuestionTooltip}\n        {cityViewQuestionTooltip}\n      </div>\n    )\n  }\n}","import React from 'react'\nimport {modes} from './App';\nimport config from './config'\nimport { Trail } from 'react-spring/renderprops'\nimport './CityViewQuestions.css';\n\nconst defaultOffscreen = 110;\nexport default class CityViewQuestions extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      x: defaultOffscreen,\n    }\n  }\n  componentDidMount() {\n    if (this.props.mode === modes.CityView) {\n      this.setState({ x: 0 })\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.mode === modes.CityView && prevProps.mode !== modes.CityView) {\n      this.setState({ x: 0 })\n    } else if (prevProps.mode === modes.CityView && this.props.mode !== modes.CityView) {\n      this.setState({ x: defaultOffscreen })\n    }\n  }\n  render() {\n    const selectedCity = this.props.cities[this.props.selectedCityIndex].City\n    const selectedTopic = this.props.topics[this.props.selectedTopicIndex].Topic;\n    const questionsData = this.props.questions.filter(question => {\n      return question.City === selectedCity && question.Subject === selectedTopic && question.Question !== ''\n    })\n    questionsData.forEach((q, i) => q.index = i);\n\n    const x = this.props.dismissingCityQuestions || this.props.mode !== modes.CityView ? defaultOffscreen : this.state.x\n    const questionsOffscreen = x === defaultOffscreen\n    const closeButtonOpacity = questionsOffscreen ? 0 : 1\n    const pointerEvents = questionsOffscreen ? 'none' : null\n    const cursor = questionsOffscreen ? 'default' : null\n    return (\n      <div className='CityViewQuestions'>\n        <div className='close' style={{ pointerEvents, color: config.color, opacity: closeButtonOpacity }}>\n          <span onClick={this.props.disableCityMode} style={{ cursor }}>&times;</span>\n        </div>\n        <Trail\n          from={{ x: defaultOffscreen }}\n          to={{ x }}\n          keys={question => `${selectedCity}-${question.index}`}\n          items={questionsData}\n          onRest={this.props.questionsRested}>\n          {question => ({ x }) =>\n            (\n              <div className='question' style={{ backgroundColor: config.color, transform: `translateX(${x}%)` }}>\n                {question.Question}\n              </div>\n            )\n          }\n        </Trail>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './App.css';\nimport DataLoader from './DataLoader';\nimport Menu from './Menu';\nimport Map from './Map'\nimport CityViewQuestions from './CityViewQuestions'\n\nexport const modes = {\n  Autoplay: 'Autoplay',\n  CityView: 'CityView',\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false,\n      selectedTopicIndex: 0,\n      selectedCityIndex: 0,\n      nextSelectedCityIndex: null,\n      nextSelectedTopicIndex: null,\n      mode: null,\n      dismissingCityQuestions: false,\n    }\n    this._onRestCallbacks = []\n  }\n  componentDidMount() {\n    DataLoader().then(({cities, topics, questions}) => {\n      this.setState({\n        loaded: true,\n        cities,\n        topics,\n        questions,\n        mode: modes.Autoplay,\n      }, this._initAutoplay)\n\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.mode === modes.CityViewQuestions && this.state.mode === modes.Autoplay) {\n      this._initAutoplay()\n    } else if (prevState.mode === modes.Autoplay && this.state.mode === modes.CityViewQuestions) {\n      clearTimeout(this._autoplayTimeout);\n    }\n  }\n\n  _initAutoplay = () => {\n    this._autoplayTimeout = setTimeout(this._pickAutoplayQuestion, 250)\n  }\n\n  _pickAutoplayQuestion = () => {\n    let question = null;\n    let cityIndex = null;\n    let tries = 0;\n    while(question == null && tries < 20) {\n      const randomCityIndex = Math.floor(Math.random() * this.state.cities.length)\n      if (randomCityIndex === this.state.selectedCityIndex) {\n        continue\n      }\n      tries ++\n\n      const selectedCity = this.state.cities[randomCityIndex].City\n      const selectedTopic = this.state.topics[this.state.selectedTopicIndex].Topic;\n      const questionsData = this.state.questions.filter(question => {\n        return question.City === selectedCity && question.Subject === selectedTopic && question.Question !== ''\n      })\n      if (questionsData.length > 0) {\n        question = questionsData[Math.floor(Math.random() * questionsData.length)]\n        cityIndex = randomCityIndex\n        console.log(selectedCity, question.Question)\n      }\n    }\n    if (question == null) {\n      console.warn('no question found, something went wrong')\n    } else {\n      this.setState({ selectedCityIndex: cityIndex, question })\n    }\n  }\n\n  _autoplayTypingDone = () => {\n    this._autoplayTimeout = setTimeout(() => {\n      this.setState({ question: null }, () => {\n        this._autoplayTimeout = setTimeout(this._pickAutoplayQuestion, 200)\n      })\n    }, 2000)\n  }\n\n  _selectTopic = (selectedTopicIndex) => {\n    return () => {\n      if (this.state.selectedTopicIndex === selectedTopicIndex) {\n        return\n      }\n      if (this.state.mode === modes.CityView) {\n        this.setState({\n          dismissingCityQuestions: true,\n          nextSelectedTopicIndex: selectedTopicIndex,\n        }, () => {\n          this._onRestCallbacks.push(() => {\n            this.setState({ dismissingCityQuestions: false, selectedTopicIndex, nextSelectedTopicIndex: null})\n          })\n        })\n      } else {\n        this.setState({ selectedTopicIndex, question: null })\n        clearTimeout(this._autoplayTimeout)\n        this._initAutoplay()\n      }\n    }\n  };\n\n  _selectCity = (selectedCityIndex) => {\n    return () => {\n      if (this.state.mode === modes.CityView) {\n        if (this.state.selectedCityIndex === selectedCityIndex) {\n          return\n        }\n        this.setState({\n          dismissingCityQuestions: true,\n          nextSelectedCityIndex: selectedCityIndex,\n        }, () => {\n          this._onRestCallbacks.push(() => {\n            this.setState({ dismissingCityQuestions: false, selectedCityIndex, nextSelectedCityIndex: null})\n          })\n        })\n      } else {\n        this._onRestCallbacks.length = 0\n        clearTimeout(this._autoplayTimeout)\n        this.setState({ selectedCityIndex, nextSelectedCityIndex: null, mode: modes.CityView, quesiton: null })\n      }\n    }\n  }\n\n  _questionsRested = () => {\n    this._onRestCallbacks.forEach(cb => cb())\n    this._onRestCallbacks.length = 0;\n  }\n\n  _disableCityMode = () => {\n    this._onRestCallbacks.length = 0\n    this.setState({ mode: modes.Autoplay }, this._pickAutoplayQuestion)\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return null;\n    }\n    return (\n      <div className=\"App\">\n        <Menu {...this.state} selectTopic={this._selectTopic} />\n        <Map {...this.state} selectCity={this._selectCity} onTypingDone={this._autoplayTypingDone} />\n        <CityViewQuestions {...this.state} questionsRested={this._questionsRested} disableCityMode={this._disableCityMode} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}